/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.43
 * Generated at: 2019-11-05 02:51:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.groupware.chatting;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import employee.model.vo.Employee;
import java.util.ArrayList;
import chatting.model.vo.Chatting;
import employee.model.vo.Company;

public final class openChat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("employee.model.vo.Company");
    _jspx_imports_classes.add("chatting.model.vo.Chatting");
    _jspx_imports_classes.add("employee.model.vo.Employee");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	Company company = (Company)session.getAttribute("comp");
	String comp = company.getDriver() +"ł"+ company.getUrl() +"ł"+ company.getId() +"ł"+ company.getPassword();
	Employee loginEmp = (Employee)session.getAttribute("loginEmp");
	
	//해당 방 전체 채팅 글
	ArrayList<Chatting> contentList = (ArrayList<Chatting>)request.getAttribute("contentList");
	
	//참여인원
	String roomUsers = (String)request.getAttribute("roomUsers");
	String[] users = roomUsers.split("ł");
	
	//친구 리스트
	ArrayList<Employee> empList = (ArrayList<Employee>)request.getAttribute("empList");
	
	//방번호
	String chatRoomNo = (String)request.getAttribute("chatRoomNo");
	
	//방 이름
	String chatTitle = (String)request.getAttribute("chatTitle");


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write(".jun-top {\r\n");
      out.write("\tbackground: #E9E6F5;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"/nado/resources/js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/nado/resources/css/bootstrap.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/nado/resources/css/jun.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/nado/resources/groupware/bower_components/font-awesome/css/font-awesome.min.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 채팅방 화면 구현하기 -->\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("<!-- \t<div class=\"row\"> -->\r\n");
      out.write("<!-- \t\t<div class=\"col-lg-12 jun-top\" style=\"height:50px;\"> -->\r\n");
      out.write("<!-- \t\t\t<table> -->\r\n");
      out.write("<!-- \t\t\t\t\t<tr> -->\r\n");
      out.write("\r\n");
      out.write("<!-- \t\t\t\t\t</tr> -->\r\n");
      out.write("<!-- \t\t\t</table> -->\r\n");
      out.write("<!-- \t\t</div> -->\r\n");
      out.write("<!-- \t</div> -->\r\n");
      out.write("\t<div class=\"page-header jun-top\">\r\n");
      out.write("\t\t<table style=\"border:solid\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th rowspan=\"2\">이미지</th>\r\n");
      out.write("\t\t\t\t<td id=\"title\">");
      out.print(chatTitle);
      out.write("</td>\r\n");
      out.write("\t\t\t\t<th rowspan><a data-toggle=\"modal\" href=\"#junModal\">초대</a></th>\r\n");
      out.write("\t\t\t\t<th rowspan><a data-toggle=\"modal\" href=\"#junModal2\">나가기</a></th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>검색</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"messageWindow\">\t\r\n");
      out.write("\t\t<div class=\"row\">\r\n");
      out.write("\t\t");
 if(contentList.size()>0){
				for(Chatting list : contentList){
					if(loginEmp.getEmpId().equals(list.getEmpId())){					
		
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"col-lg-12\">\r\n");
      out.write("\t\t\t\t\t<div class=\"talk-bubble tri-right round right-in\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"talktext\">\r\n");
      out.write("\t\t\t\t\t\t\t<p>");
      out.print( list.getChatContent() );
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t");
}else{ 
      out.write("\r\n");
      out.write("\t\t\t\t<div class=\"col-lg-12\">\r\n");
      out.write("\t\t\t\t\t<div class=\"talk-bubble-left tri-left round left-in other-side \">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"talktext\">\r\n");
      out.write("\t\t\t\t\t\t\t<p>");
      out.print( list.getChatContent() );
      out.write("</p>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t");
}}}else{ 
      out.write("\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"input-group\"><input class=\"form-control\" type=\"text\" name=\"content\" id=\"inputMessage\" onkeyup=\"enterKey();\">\r\n");
      out.write("\t\t<span class=\"input-group-addon\"><button id=\"bn\" class=\"btn\" onclick=\"send();\"><i class=\"fa fa-edit fa-2x\"></i></button></span></div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"modal fade\" id=\"junModal\" role=\"dialog\">\r\n");
      out.write("\t<div class=\"modal-dialog\">\r\n");
      out.write("\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t<div class=\"modal-header\">\r\n");
      out.write("\t\t\t\t<h4 class=\"modal-title\">초대</h4>\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\">×</button>\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\t<div class=\"container\">\r\n");
      out.write("\t\t\t\t\t<div class=\"modal-body\">\r\n");
      out.write("\t\t\t\t\t\t<div class=\"row\">\r\n");
      out.write("\t\t\t\t\t\t\t<div style=\"float:left\">\r\n");
      out.write("\t\t\t\t\t\t\t\t<div style=\"overflow:auto; width:200px; height:200px; border:1px solid silver\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
jun: for(Employee eList : empList){
											   	for(String userList : users){
													if(eList.getEmpId().equals(userList))
														continue jun;
											   	}
									
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<div style=\"text-align:center;\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<label for=\"");
      out.print( eList.getEmpId() );
      out.write("\"><img style=\"width:30px; height:30px;\" src=\"/nado/resources/groupware/employee_profile/");
 if(eList.getMyProfile() != null){ 
      out.print( eList.getMyProfile() );
}else{
      out.write("default-profile.png");
}
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
      out.print( eList.getEmpName() );
      out.write("</label>\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"");
      out.print( eList.getEmpId() );
      out.write("\" name=\"invitedUsers\" value=\"");
      out.print( eList.getEmpId() );
      out.write("\">\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t<div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-info\" data-dismiss=\"modal\" onclick=\"inviteUser2();\">초대</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" >취소</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"modal fade\" id=\"junModal2\" role=\"dialog\">\r\n");
      out.write("\t<div class=\"modal-dialog\">\r\n");
      out.write("\t\t<div class=\"modal-content\">\r\n");
      out.write("\t\t\t<div class=\"modal-header\">\r\n");
      out.write("\t\t\t\t<h5 class=\"modal-title\">방 나가기</h5>\r\n");
      out.write("\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"modal\">×</button>\t\r\n");
      out.write("\t\t\t</div>\t\t\r\n");
      out.write("\t\t\t<div class=\"modal-body\">\r\n");
      out.write("\t\t\t\t<p>정말로 나가시겠습니까?</p>\r\n");
      out.write("\t\t\t</div>\t\t\r\n");
      out.write("\t\t\t<div class=\"modal-footer\">\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-info\" data-dismiss=\"modal\" onclick=\"exitTheRoom();\">나가기</button>\r\n");
      out.write("\t\t\t\t<button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" >취소</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script src=\"/nado/resources/js/bootstrap.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("var $textarea = $(\"#messageWindow\");\r\n");
      out.write("var $inputMessage = $(\"#inputMessage\");\r\n");
      out.write("var webSocket;\r\n");
      out.write("\r\n");
      out.write("//자기사번\r\n");
      out.write("var empId = \"");
      out.print( loginEmp.getEmpId() );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("//방 참여인원들\r\n");
      out.write("var roomUsers =\"");
      out.print( roomUsers );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("//회사정보 저장\r\n");
      out.write("var comp= \"");
      out.print( comp );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("//방번호\r\n");
      out.write("var rNo = \"");
      out.print( chatRoomNo );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("//자기이름\r\n");
      out.write("var empName = \"");
      out.print( loginEmp.getEmpName() );
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("connection();\r\n");
      out.write("\r\n");
      out.write("function connection(){\r\n");
      out.write("\t\r\n");
      out.write("\twebSocket = new WebSocket(\"ws://127.0.0.1:8800/nado/chatserver\");\r\n");
      out.write("\r\n");
      out.write("\twebSocket.onopen = function(event){\r\n");
      out.write("\t\t//방 참여자들 사번 보냄\r\n");
      out.write("\t    webSocket.send(\"roomsł\" + roomUsers);\r\n");
      out.write("\t  \r\n");
      out.write("\t\t//회사정보\r\n");
      out.write("\t    webSocket.send(\"compł\" + comp);\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\twebSocket.onmessage = function(event){\r\n");
      out.write("    \tonMessage(event);\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\twebSocket.onerror = function(event){\r\n");
      out.write("\t \tonError(event);\r\n");
      out.write("\t};\r\n");
      out.write("\r\n");
      out.write("\twebSocket.onclose = function(event){\r\n");
      out.write(" \t\tonClose(event);\r\n");
      out.write("\t};\r\n");
      out.write("}\r\n");
      out.write("function send(){\r\n");
      out.write("\t//메세지를 입력하지 않고 버튼 누른 경우\r\n");
      out.write("\tif($inputMessage.val() == \"\") {\r\n");
      out.write("\t\talert(\"전송할 메세지를 입력하세요.\");\r\n");
      out.write("\t}else{  //메세지가 입력된 경우\r\n");
      out.write("\t\t$textarea.html($textarea.html() + \"<div class='talk-bubble tri-right round right-in'><div class='talktext'><p>\"\r\n");
      out.write("\t\t\t+ $inputMessage.val() + \"</p></div></div><br>\");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 방번호, 사번, 이름, 메시지 \r\n");
      out.write("\t\twebSocket.send(\"rChatł\"+rNo+\"ł\"+empId+\"ł\"+empName+\"ł\"+$inputMessage.val()); \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$inputMessage.val(\"\");  //기록된 메세지 삭제함\r\n");
      out.write("\t\t$textarea.scrollTop($textarea[0].scrollHeight);\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("function enterKey(){\r\n");
      out.write("\tif(window.event.keyCode == 13){\r\n");
      out.write("\t\tsend();\r\n");
      out.write("\t}\r\n");
      out.write("};\r\n");
      out.write("\r\n");
      out.write("\tfunction onMessage(event){\r\n");
      out.write("\t\t//받은내용(사번+\"ł\"+이름+\"ł\"+내용))\r\n");
      out.write("\t\tvar fullMessage = event.data;\r\n");
      out.write("\t\tvar message = fullMessage.split(\"ł\");\r\n");
      out.write("\t\tvar mHead = message[0];\r\n");
      out.write("\t\tconsole.log(event.data);\r\n");
      out.write("\t\tif(mHead == \"inviteUser\"){\r\n");
      out.write("\t\t\tvar mBody = fullMessage.substring(fullMessage.indexOf(\"ł\")+1, fullMessage.length);\r\n");
      out.write("\t\t\tvar fullTitle = mBody.split(\":\");\r\n");
      out.write("\t\t\troomUsers = fullTitle[0];   //원래 저장되있던 방참여유져들을 초대된 유져들로 바꿔줌\r\n");
      out.write("\t\t\tvar rtitle = fullTitle[1];\r\n");
      out.write("\t\t\t$(\"#title\").html(rtitle);\r\n");
      out.write("\t\t\tconsole.log(\"참여인원+타이틀 : \"+mBody);\r\n");
      out.write("\t\t\tconsole.log(\"방참여유져들 : \"+roomUsers);\r\n");
      out.write("\t\t\tconsole.log(\"타이틀 : \"+rtitle);\t\t\r\n");
      out.write("\t\t}else{\t\t\r\n");
      out.write("\t\t\tvar receiveName = message[1];\r\n");
      out.write("\t\t\tvar receiveContent = message[2];\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$textarea.html($textarea.html()\r\n");
      out.write("\t\t\t\t\t+ \"<div class='talk-bubble-left tri-left round left-in other-side'><div class='talktext'><p>\"\r\n");
      out.write("\t\t\t\t\t+ receiveName + \" : \"+ receiveContent \r\n");
      out.write("\t\t\t\t\t+ \"</p></div></div><br>\");\r\n");
      out.write("// \t\t\t화면이 위로 스크롤되게 처리함\r\n");
      out.write("\t\t\t$textarea.scrollTop($textarea[0].scrollHeight);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("$(function(){\r\n");
      out.write("\t$textarea.scrollTop($textarea[0].scrollHeight);\r\n");
      out.write("});\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t//친구초대\r\n");
      out.write("\tfunction inviteUser2() {\r\n");
      out.write("\t\tvar plus = \"inviteChatł\" + roomUsers +\":\";\r\n");
      out.write("\t\tif($(\"input:checkbox[name='invitedUsers']:checked\").length ==0){\r\n");
      out.write("\t\t\talert(\"한명 이상을 선택해주세요.\");\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\t\t$(\"input:checkbox[name='invitedUsers']\").each(function() {\r\n");
      out.write("\t\t\t\tif ($(this).is(\":checked\") == true) {\r\n");
      out.write("\t\t\t\t\tplus += \"ł\" + $(this).val();\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\twebSocket.send(plus);\r\n");
      out.write("\t\t\t$(\"input:checkbox[name='invitedUsers']\").each(function() {\r\n");
      out.write("\t\t\t\tif ($(this).is(\":checked\") == true) {\r\n");
      out.write("\t\t\t\t\t$(this).prop(\"checked\", false);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t});\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction exitTheRoom(){\r\n");
      out.write("\t\twebSocket.send(\"etrł\"+ roomUsers + \":\" + empId);\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
